import { Meteor } from 'meteor/meteor';import { Template } from 'meteor/templating';import { ReactiveDict } from 'meteor/reactive-dict'; import { Tasks } from '../api/tasks.js'; import './task.js';import './body.html';Template.body.onCreated(function bodyOnCreated() {  this.state = new ReactiveDict();  Meteor.subscribe('tasks');}); Template.body.helpers({  tasks() {  	const instance = Template.instance();        if (instance.state.get('hideCompleted')) {      	if (instance.state.get('sortByOwner')) {      		// If sort by owner is checked while hide is checked, sort tasks in order      		return Tasks.find({ checked: { $ne: true } }, { sort: { owner: -1 } });    	}      // If hide completed is checked, filter tasks sorted by most recent on top      return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: 1 } });    }        if (instance.state.get('sortByOwner')) {      // If sort by owner is checked, sort tasks      return Tasks.find({}, { sort: { owner: -1 } });    }            // Otherwise, return all of the tasks sorted by most recent at top    return Tasks.find({}, { sort: { createdAt: 1 } });  },  	incompleteCount() {    return Tasks.find({ checked: { $ne: true } }).count();  },});Template.body.events({  'submit .new-task'(event) {    // Prevent default browser form submit    event.preventDefault();     // Get value from form element    const target = event.target;    const text = target.text.value;     // Insert a task into the collection    Meteor.call('tasks.insert', text);     // Clear form    target.text.value = '';  },  'change .hide-completed input'(event, instance) {    instance.state.set('hideCompleted', event.target.checked);  },  'change .sort-owner input'(event, instance) {  	instance.state.set('sortByOwner', event.target.checked);  },});